install.packages("rmdformats")
install.packages("JuliaCall")
library(JuliaCall)
install_julia()
julia <- julia_setup()
install.packages(tufte)
install.packages("tufte")
names(knitr::knit_engines$get())
knitr::fig.align = 'center'
?fig.align
??fig.align
TRUE
paste("One for ", input, ", one for me.")
two_fer = function(input) {
if (input = "") {
two_fer = function(input) {
if (input == "") {
paste("One for you, one for me.")
} else {
paste("One for ", input, ", one for me.")
}
}
two_fer = function(input) {
if (input == "") {
paste("One for you, one for me.")
} else {
paste("One for ", input, ", one for me.")
}
}
two_fer(Alice)
two_fer = function(input) {
if (input == "") {
paste("One for you, one for me.")
} else {
paste("One for ", input, ", one for me.")
}
}
two_fer("Alice")
two_fer = function(input) {
if (input == "") {
paste("One for you, one for me.")
} else {
paste("One for ", input, ",one for me.")
}
}
two_fer("Alice")
two_fer = function(input) {
if (input == "") {
paste("One for you, one for me.")
} else {
paste("One for", input,",one for me.")
}
}
two_fer("Alice")
two_fer = function(input) {
if (input == "") {
paste("One for you, one for me.")
} else {
paste("One for", input,",one for me.")
}
}
two_fer("")
two_fer = function(input) {
if (is.na(input)) {
paste("One for you, one for me.")
} else {
paste("One for", input,",one for me.")
}
}
two_fer("")
two_fer = function(input) {
if (is.na(input)) {
paste("One for you, one for me.")
} else {
paste("One for", input,",one for me.")
}
}
two_fer()
two_fer = function(input) {
if (input == ) {
two_fer = function(input) {
if (input == "") {
paste("One for you, one for me.")
} else {
paste("One for", input,",one for me.")
}
}
two_fer()
two_fer = function(input) {
if (input == "") {
paste("One for you, one for me.")
} else {
paste("One for", input,",one for me.")
}
}
two_fer()
two_fer = function(input) {
if (missing(input)) {
paste("One for you, one for me.")
} else {
paste("One for", input,",one for me.")
}
}
two_fer()
knitr::opts_chunk$set(error = FALSE,
warning = FALSE,
message = FALSE)
library(JuliaCall)
julia <- julia_setup()
install.packages("gpower")
leap <- function(year){
if(year % 4 == 0){
leap <- function(year){
if(year %% 4 == 0){
if(year %% 100 == 0){
if(year %% 400 == 0){
paste("Leap Year")
}else{paste("Not a Leap Year")}
}else{paste("Leap Year")}
}else{paste("Note a Leap Year")}
}
leap(4)
leap(400)
leap(100)
leap(500)
leap(2000)
leap(2004)
leap <- function(year){
if(year %% 4 == 0){
if(year %% 100 == 0){
if(year %% 400 == 0){TRUE}
else{FALSE}
}else{TRUE}
}else{FALSE}
}
leap(4)
leap(400)
tournament <- function(input) {
split_input = strsplit(input, ";| ")
matrix_input = matrix(unlist(split_input),
ncol = 3,
byrow = TRUE)
df_input = as.data.frame(matrix_input)
colnames(df) = c("t1", "t2", "result")
}
tournament = function(input) {
split_input = strsplit(input, ";| ")
matrix_input = matrix(unlist(split_input),
ncol = 3,
byrow = TRUE)
df_input = as.data.frame(matrix_input)
colnames(df) = c("t1", "t2", "result")
}
tournament(Allegoric Alaskans;Blithering Badgers;win
tournament(c("Allegoric Alaskans;Blithering Badgers;win",
"Devastating Donkeys;Courageous Californians;draw",
"Devastating Donkeys;Allegoric Alaskans;win",
"Courageous Californians;Blithering Badgers;loss",
"Blithering Badgers;Devastating Donkeys;loss",
"Allegoric Alaskans;Courageous Californians;win",
))
tournament = function(input) {
split_input = strsplit(input, ";| ")
matrix_input = matrix(unlist(split_input),
ncol = 3,
byrow = TRUE)
df_input = as.data.frame(matrix_input)
colnames(df) = c("t1", "t2", "result")
}
tournament(c("Allegoric Alaskans;Blithering Badgers;win Devastating Donkeys;Courageous Californians;draw Devastating Donkeys;Allegoric Alaskans;win Courageous Californians;Blithering Badgers;loss Blithering Badgers;Devastating Donkeys;loss Allegoric Alaskans;Courageous Californians;win"
))
strsplit(c("Allegoric Alaskans;Blithering Badgers;win Devastating Donkeys;Courageous Californians;draw Devastating Donkeys;Allegoric Alaskans;win Courageous Californians;Blithering Badgers;loss Blithering Badgers;Devastating Donkeys;loss Allegoric Alaskans;Courageous Californians;win"
))
strsplit(c("Allegoric Alaskans;Blithering Badgers;win Devastating Donkeys;Courageous Californians;draw Devastating Donkeys;Allegoric Alaskans;win Courageous Californians;Blithering Badgers;loss Blithering Badgers;Devastating Donkeys;loss Allegoric Alaskans;Courageous Californians;win",  ";| "
))
strsplit(c("Allegoric Alaskans;Blithering Badgers;win Devastating Donkeys;Courageous Californians;draw Devastating Donkeys;Allegoric Alaskans;win Courageous Californians;Blithering Badgers;loss Blithering Badgers;Devastating Donkeys;loss Allegoric Alaskans;Courageous Californians;win",  ";| "
))
strsplit(c("Allegoric Alaskans;Blithering Badgers;win Devastating Donkeys;Courageous Californians;draw Devastating Donkeys;Allegoric Alaskans;win Courageous Californians;Blithering Badgers;loss Blithering Badgers;Devastating Donkeys;loss Allegoric Alaskans;Courageous Californians;win"),  ";| "
)
strsplit(c("Allegoric Alaskans;Blithering Badgers;win Devastating Donkeys;Courageous Californians;draw Devastating Donkeys;Allegoric Alaskans;win Courageous Californians;Blithering Badgers;loss Blithering Badgers;Devastating Donkeys;loss Allegoric Alaskans;Courageous Californians;win"),  ";|"
)
strsplit(c("Allegoric Alaskans;Blithering Badgers;win Devastating Donkeys;Courageous Californians;draw Devastating Donkeys;Allegoric Alaskans;win Courageous Californians;Blithering Badgers;loss Blithering Badgers;Devastating Donkeys;loss Allegoric Alaskans;Courageous Californians;win"),  ";"
)
strsplit(c("Allegoric Alaskans;Blithering Badgers;win
Devastating Donkeys;Courageous Californians;draw
Devastating Donkeys;Allegoric Alaskans;win
Courageous Californians;Blithering Badgers;loss
Blithering Badgers;Devastating Donkeys;loss
Allegoric Alaskans;Courageous Californians;win"),  ";"
)
strsplit(c("Allegoric Alaskans;Blithering Badgers;win
Devastating Donkeys;Courageous Californians;draw
Devastating Donkeys;Allegoric Alaskans;win
Courageous Californians;Blithering Badgers;loss
Blithering Badgers;Devastating Donkeys;loss
Allegoric Alaskans;Courageous Californians;win"),  ";\n"
)
strsplit(c("Allegoric Alaskans;Blithering Badgers;win
Devastating Donkeys;Courageous Californians;draw
Devastating Donkeys;Allegoric Alaskans;win
Courageous Californians;Blithering Badgers;loss
Blithering Badgers;Devastating Donkeys;loss
Allegoric Alaskans;Courageous Californians;win"),  ";", "\n")
strsplit(c("Allegoric Alaskans;Blithering Badgers;win
Devastating Donkeys;Courageous Californians;draw
Devastating Donkeys;Allegoric Alaskans;win
Courageous Californians;Blithering Badgers;loss
Blithering Badgers;Devastating Donkeys;loss
Allegoric Alaskans;Courageous Californians;win"),  ";| ")
strsplit(c("Allegoric Alaskans;Blithering Badgers;win
Devastating Donkeys;Courageous Californians;draw
Devastating Donkeys;Allegoric Alaskans;win
Courageous Californians;Blithering Badgers;loss
Blithering Badgers;Devastating Donkeys;loss
Allegoric Alaskans;Courageous Californians;win"),  ";|")
strsplit(c("Allegoric Alaskans;Blithering Badgers;win
Devastating Donkeys;Courageous Californians;draw
Devastating Donkeys;Allegoric Alaskans;win
Courageous Californians;Blithering Badgers;loss
Blithering Badgers;Devastating Donkeys;loss
Allegoric Alaskans;Courageous Californians;win"),  ";")
strsplit(c("Allegoric Alaskans;Blithering Badgers;win
Devastating Donkeys;Courageous Californians;draw
Devastating Donkeys;Allegoric Alaskans;win
Courageous Californians;Blithering Badgers;loss
Blithering Badgers;Devastating Donkeys;loss
Allegoric Alaskans;Courageous Californians;win"),  "\n")
strsplit(c("Allegoric Alaskans;Blithering Badgers;win\nDevastating Donkeys;Courageous Californians;draw\nDevastating Donkeys;Allegoric Alaskans;win\nCourageous Californians;Blithering Badgers;loss\nBlithering Badgers;Devastating Donkeys;loss\nAllegoric Alaskans;Courageous Californians;win"),  "\n")
strsplit(c("Allegoric Alaskans;Blithering Badgers;win\nDevastating Donkeys;Courageous Californians;draw\nDevastating Donkeys;Allegoric Alaskans;win\nCourageous Californians;Blithering Badgers;loss\nBlithering Badgers;Devastating Donkeys;loss\nAllegoric Alaskans;Courageous Californians;win"),  ";\n")
strsplit(c("Allegoric Alaskans;Blithering Badgers;win\nDevastating Donkeys;Courageous Californians;draw\nDevastating Donkeys;Allegoric Alaskans;win\nCourageous Californians;Blithering Badgers;loss\nBlithering Badgers;Devastating Donkeys;loss\nAllegoric Alaskans;Courageous Californians;win"),  "\n", ";")
strsplit(c("Allegoric Alaskans;Blithering Badgers;win\nDevastating Donkeys;Courageous Californians;draw\nDevastating Donkeys;Allegoric Alaskans;win\nCourageous Californians;Blithering Badgers;loss\nBlithering Badgers;Devastating Donkeys;loss\nAllegoric Alaskans;Courageous Californians;win"),  "\n" & "\n",)
strsplit(c("Allegoric Alaskans;Blithering Badgers;win\nDevastating Donkeys;Courageous Californians;draw\nDevastating Donkeys;Allegoric Alaskans;win\nCourageous Californians;Blithering Badgers;loss\nBlithering Badgers;Devastating Donkeys;loss\nAllegoric Alaskans;Courageous Californians;win"),  "\n",)
input = (c("Allegoric Alaskans;Blithering Badgers;win\nDevastating Donkeys;Courageous Californians;draw\nDevastating Donkeys;Allegoric Alaskans;win\nCourageous Californians;Blithering Badgers;loss\nBlithering Badgers;Devastating Donkeys;loss\nAllegoric Alaskans;Courageous Californians;win")
inputa = c("Allegoric Alaskans;Blithering Badgers;win
inputa = c("Allegoric Alaskans;Blithering Badgers;win
Devastating Donkeys;Courageous Californians;draw
Devastating Donkeys;Allegoric Alaskans;win
Courageous Californians;Blithering Badgers;loss
Blithering Badgers;Devastating Donkeys;loss
Allegoric Alaskans;Courageous Californians;win")
split_input = strsplit(inputa, "\n")
split_input = strsplit(split_input, ";")
split_input = strsplit(split_input, ";")
split_input
split_input = strsplit(inputa, ";\n")
split_input
split_input = strsplit(inputa, "\n")
input = c("Allegoric Alaskans;Blithering Badgers;win
Devastating Donkeys;Courageous Californians;draw
Devastating Donkeys;Allegoric Alaskans;win
Courageous Californians;Blithering Badgers;loss
Blithering Badgers;Devastating Donkeys;loss
Allegoric Alaskans;Courageous Californians;win")
split_input = strsplit(inputa, "(?:\\s+(\n|;)\\s+))
split_input = strsplit(input, "(?:\\s+(\n|;)\\s+)")
split_input
split_input = strsplit(input, "\n|;")
split_input
matrix_input = matrix(unlist(split_input),
ncol = 3,
byrow = TRUE)
df_input = as.data.frame(matrix_input)
View(df_input)
colnames(df_input) = c("t1", "t2", "result")
View(df_input)
league_table = as.data.frame(matrix(ncol = 6, nrow = nrow(df_input)))
View(league_table)
league_table = as.data.frame(matrix(ncol = 6, nrow = length(unique(df_input$t1)))
length(unique(df_input$t1)
length(unique(df_input$t1))
league_table = as.data.frame(matrix(ncol = 6, nrow = length(unique(df_input$t1)))
league_table = as.data.frame(matrix(ncol = 6, nrow = length(unique(df_input$t1)))
league_table = as.data.frame(matrix(ncol = 6, nrow = length(unique(df_input$t1))))
colnames(league_table) = c("Team", "MP", "W", "D", "L", "P")
unique(df_input$t1)
league_table
for (i in (1:nrow(df_input))){
i
}
for (i in 1:nrow(df_input)){
i
}
paste0(i)
for (i in 1:nrow(df_input)){
paste0(i)
}
knitr::opts_chunk$set(error = FALSE,
warning = FALSE,
message = FALSE)
set.seed(123)
group1 <- data.frame(cod_size = rnorm(10), cod_age = rnorm(10), cod_weight = rnorm(10))
group2 <- data.frame(cod_size = rnorm(10), cod_age = rnorm(10), cod_weight = rnorm(10))
View(group1)
# create random sample data (imagine it has been standardised)
set.seed(123)
jersey = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
sark = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
# combine the two groups into one data frame
df = rbind(jersey, sark)
# create a grouping variable
group = factor(c(rep("Jersey", 10),
rep("Sark", 10)))
# MANOVA
fit <- car::manova(cbind(x, y, z) ~ group,
data = data)
# create random sample data (imagine it has been standardised)
set.seed(123)
jersey = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
sark = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
# combine the two groups into one data frame
df = rbind(jersey, sark)
# create a grouping variable
group = factor(c(rep("Jersey", 10),
rep("Sark", 10)))
# MANOVA
fit <- car::manova(cbind(cod_size,
cod_age,
cod_weight) ~ group,
data = data)
# create random sample data (imagine it has been standardised)
set.seed(123)
jersey = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
sark = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
# combine the two groups into one data frame
df = rbind(jersey, sark)
# create a grouping variable
group = factor(c(rep("Jersey", 10),
rep("Sark", 10)))
# MANOVA
fit <- manova(cbind(cod_size,
cod_age,
cod_weight) ~ group,
data = data)
# create random sample data (imagine it has been standardised)
set.seed(123)
jersey = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
sark = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
# combine the two groups into one data frame
df = rbind(jersey, sark)
# create a grouping variable
group = factor(c(rep("Jersey", 10),
rep("Sark", 10)))
# MANOVA
fit <- manova(car:cbind(cod_size,
cod_age,
cod_weight) ~ group,
data = data)
jersey = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
# create random sample data (imagine it has been standardised)
set.seed(123)
jersey = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
sark = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
# combine the two groups into one data frame
df = rbind(jersey, sark)
# create a grouping variable
group = factor(c(rep("Jersey", 10),
rep("Sark", 10)))
# MANOVA
fit <- manova(cbind(cod_size,
cod_age,
cod_weight) ~ group,
data = df)
# Print the results
summary(fit)
View(df)
plot(model)
# load tidyverse
library(tidyverse)
# load gapminder for 2007
data_gm = gapminder::gapminder %>%
filter(year == 2007)
# lets have a look at the data
data_gm
# assign data and variable
ggplot(data = data_gm,
aes(y = lifeExp, x = continent)) +
geom_point() +
labs(title = "Life Expentancy and Continents",
x = "Continent",
y = "Life Expectancy")
# use the lm() function
model = lm(data = data_gm,
formula = lifeExp ~ continent)
# export summary of regression
summary(model)
plot(model)
knitr::opts_chunk$set(error = FALSE,
warning = FALSE,
message = FALSE)
# Load the mtcars dataset
data(mtcars)
# Fit a linear regression model
model <- lm(mpg ~ hp, data = mtcars)
# Plot the residuals against the fitted values to check for heteroscedasticity
plot(model$fitted.values, model$residuals, main = "Residuals vs Fitted",
xlab = "Fitted values", ylab = "Residuals")
# Calculate the mean variance at different points in the regression
means <- aggregate(model$residuals^2, by = list(model$fitted.values), FUN = mean)
plot(means, type = "l", main = "Mean Variance vs Fitted", xlab = "Fitted values", ylab = "Mean Variance")
# generate some random data
set.seed(123)
x <- rnorm(100)
y <- rpois(100, exp(x))
# fit a Poisson regression model with log link function
model <- glm(y ~ x, family = poisson(link = "log"))
# print summary of model
summary(model)
# generate some random data
set.seed(123)
x = rnorm(100)
z = rnorm(100)
y = rpois(100, exp(x))
# fit a Poisson regression model with log link function
model = glm(y ~ x + z,
family = poisson(link = "log"))
# print summary of model
summary(model)
plot(model)
