if(year %% 400 == 0){
paste("Leap Year")
}else{paste("Not a Leap Year")}
}else{paste("Leap Year")}
}else{paste("Note a Leap Year")}
}
leap(4)
leap(400)
leap(100)
leap(500)
leap(2000)
leap(2004)
leap <- function(year){
if(year %% 4 == 0){
if(year %% 100 == 0){
if(year %% 400 == 0){TRUE}
else{FALSE}
}else{TRUE}
}else{FALSE}
}
leap(4)
leap(400)
tournament <- function(input) {
split_input = strsplit(input, ";| ")
matrix_input = matrix(unlist(split_input),
ncol = 3,
byrow = TRUE)
df_input = as.data.frame(matrix_input)
colnames(df) = c("t1", "t2", "result")
}
tournament = function(input) {
split_input = strsplit(input, ";| ")
matrix_input = matrix(unlist(split_input),
ncol = 3,
byrow = TRUE)
df_input = as.data.frame(matrix_input)
colnames(df) = c("t1", "t2", "result")
}
tournament(Allegoric Alaskans;Blithering Badgers;win
tournament(c("Allegoric Alaskans;Blithering Badgers;win",
"Devastating Donkeys;Courageous Californians;draw",
"Devastating Donkeys;Allegoric Alaskans;win",
"Courageous Californians;Blithering Badgers;loss",
"Blithering Badgers;Devastating Donkeys;loss",
"Allegoric Alaskans;Courageous Californians;win",
))
tournament = function(input) {
split_input = strsplit(input, ";| ")
matrix_input = matrix(unlist(split_input),
ncol = 3,
byrow = TRUE)
df_input = as.data.frame(matrix_input)
colnames(df) = c("t1", "t2", "result")
}
tournament(c("Allegoric Alaskans;Blithering Badgers;win Devastating Donkeys;Courageous Californians;draw Devastating Donkeys;Allegoric Alaskans;win Courageous Californians;Blithering Badgers;loss Blithering Badgers;Devastating Donkeys;loss Allegoric Alaskans;Courageous Californians;win"
))
strsplit(c("Allegoric Alaskans;Blithering Badgers;win Devastating Donkeys;Courageous Californians;draw Devastating Donkeys;Allegoric Alaskans;win Courageous Californians;Blithering Badgers;loss Blithering Badgers;Devastating Donkeys;loss Allegoric Alaskans;Courageous Californians;win"
))
strsplit(c("Allegoric Alaskans;Blithering Badgers;win Devastating Donkeys;Courageous Californians;draw Devastating Donkeys;Allegoric Alaskans;win Courageous Californians;Blithering Badgers;loss Blithering Badgers;Devastating Donkeys;loss Allegoric Alaskans;Courageous Californians;win",  ";| "
))
strsplit(c("Allegoric Alaskans;Blithering Badgers;win Devastating Donkeys;Courageous Californians;draw Devastating Donkeys;Allegoric Alaskans;win Courageous Californians;Blithering Badgers;loss Blithering Badgers;Devastating Donkeys;loss Allegoric Alaskans;Courageous Californians;win",  ";| "
))
strsplit(c("Allegoric Alaskans;Blithering Badgers;win Devastating Donkeys;Courageous Californians;draw Devastating Donkeys;Allegoric Alaskans;win Courageous Californians;Blithering Badgers;loss Blithering Badgers;Devastating Donkeys;loss Allegoric Alaskans;Courageous Californians;win"),  ";| "
)
strsplit(c("Allegoric Alaskans;Blithering Badgers;win Devastating Donkeys;Courageous Californians;draw Devastating Donkeys;Allegoric Alaskans;win Courageous Californians;Blithering Badgers;loss Blithering Badgers;Devastating Donkeys;loss Allegoric Alaskans;Courageous Californians;win"),  ";|"
)
strsplit(c("Allegoric Alaskans;Blithering Badgers;win Devastating Donkeys;Courageous Californians;draw Devastating Donkeys;Allegoric Alaskans;win Courageous Californians;Blithering Badgers;loss Blithering Badgers;Devastating Donkeys;loss Allegoric Alaskans;Courageous Californians;win"),  ";"
)
strsplit(c("Allegoric Alaskans;Blithering Badgers;win
Devastating Donkeys;Courageous Californians;draw
Devastating Donkeys;Allegoric Alaskans;win
Courageous Californians;Blithering Badgers;loss
Blithering Badgers;Devastating Donkeys;loss
Allegoric Alaskans;Courageous Californians;win"),  ";"
)
strsplit(c("Allegoric Alaskans;Blithering Badgers;win
Devastating Donkeys;Courageous Californians;draw
Devastating Donkeys;Allegoric Alaskans;win
Courageous Californians;Blithering Badgers;loss
Blithering Badgers;Devastating Donkeys;loss
Allegoric Alaskans;Courageous Californians;win"),  ";\n"
)
strsplit(c("Allegoric Alaskans;Blithering Badgers;win
Devastating Donkeys;Courageous Californians;draw
Devastating Donkeys;Allegoric Alaskans;win
Courageous Californians;Blithering Badgers;loss
Blithering Badgers;Devastating Donkeys;loss
Allegoric Alaskans;Courageous Californians;win"),  ";", "\n")
strsplit(c("Allegoric Alaskans;Blithering Badgers;win
Devastating Donkeys;Courageous Californians;draw
Devastating Donkeys;Allegoric Alaskans;win
Courageous Californians;Blithering Badgers;loss
Blithering Badgers;Devastating Donkeys;loss
Allegoric Alaskans;Courageous Californians;win"),  ";| ")
strsplit(c("Allegoric Alaskans;Blithering Badgers;win
Devastating Donkeys;Courageous Californians;draw
Devastating Donkeys;Allegoric Alaskans;win
Courageous Californians;Blithering Badgers;loss
Blithering Badgers;Devastating Donkeys;loss
Allegoric Alaskans;Courageous Californians;win"),  ";|")
strsplit(c("Allegoric Alaskans;Blithering Badgers;win
Devastating Donkeys;Courageous Californians;draw
Devastating Donkeys;Allegoric Alaskans;win
Courageous Californians;Blithering Badgers;loss
Blithering Badgers;Devastating Donkeys;loss
Allegoric Alaskans;Courageous Californians;win"),  ";")
strsplit(c("Allegoric Alaskans;Blithering Badgers;win
Devastating Donkeys;Courageous Californians;draw
Devastating Donkeys;Allegoric Alaskans;win
Courageous Californians;Blithering Badgers;loss
Blithering Badgers;Devastating Donkeys;loss
Allegoric Alaskans;Courageous Californians;win"),  "\n")
strsplit(c("Allegoric Alaskans;Blithering Badgers;win\nDevastating Donkeys;Courageous Californians;draw\nDevastating Donkeys;Allegoric Alaskans;win\nCourageous Californians;Blithering Badgers;loss\nBlithering Badgers;Devastating Donkeys;loss\nAllegoric Alaskans;Courageous Californians;win"),  "\n")
strsplit(c("Allegoric Alaskans;Blithering Badgers;win\nDevastating Donkeys;Courageous Californians;draw\nDevastating Donkeys;Allegoric Alaskans;win\nCourageous Californians;Blithering Badgers;loss\nBlithering Badgers;Devastating Donkeys;loss\nAllegoric Alaskans;Courageous Californians;win"),  ";\n")
strsplit(c("Allegoric Alaskans;Blithering Badgers;win\nDevastating Donkeys;Courageous Californians;draw\nDevastating Donkeys;Allegoric Alaskans;win\nCourageous Californians;Blithering Badgers;loss\nBlithering Badgers;Devastating Donkeys;loss\nAllegoric Alaskans;Courageous Californians;win"),  "\n", ";")
strsplit(c("Allegoric Alaskans;Blithering Badgers;win\nDevastating Donkeys;Courageous Californians;draw\nDevastating Donkeys;Allegoric Alaskans;win\nCourageous Californians;Blithering Badgers;loss\nBlithering Badgers;Devastating Donkeys;loss\nAllegoric Alaskans;Courageous Californians;win"),  "\n" & "\n",)
strsplit(c("Allegoric Alaskans;Blithering Badgers;win\nDevastating Donkeys;Courageous Californians;draw\nDevastating Donkeys;Allegoric Alaskans;win\nCourageous Californians;Blithering Badgers;loss\nBlithering Badgers;Devastating Donkeys;loss\nAllegoric Alaskans;Courageous Californians;win"),  "\n",)
input = (c("Allegoric Alaskans;Blithering Badgers;win\nDevastating Donkeys;Courageous Californians;draw\nDevastating Donkeys;Allegoric Alaskans;win\nCourageous Californians;Blithering Badgers;loss\nBlithering Badgers;Devastating Donkeys;loss\nAllegoric Alaskans;Courageous Californians;win")
inputa = c("Allegoric Alaskans;Blithering Badgers;win
inputa = c("Allegoric Alaskans;Blithering Badgers;win
Devastating Donkeys;Courageous Californians;draw
Devastating Donkeys;Allegoric Alaskans;win
Courageous Californians;Blithering Badgers;loss
Blithering Badgers;Devastating Donkeys;loss
Allegoric Alaskans;Courageous Californians;win")
split_input = strsplit(inputa, "\n")
split_input = strsplit(split_input, ";")
split_input = strsplit(split_input, ";")
split_input
split_input = strsplit(inputa, ";\n")
split_input
split_input = strsplit(inputa, "\n")
input = c("Allegoric Alaskans;Blithering Badgers;win
Devastating Donkeys;Courageous Californians;draw
Devastating Donkeys;Allegoric Alaskans;win
Courageous Californians;Blithering Badgers;loss
Blithering Badgers;Devastating Donkeys;loss
Allegoric Alaskans;Courageous Californians;win")
split_input = strsplit(inputa, "(?:\\s+(\n|;)\\s+))
split_input = strsplit(input, "(?:\\s+(\n|;)\\s+)")
split_input
split_input = strsplit(input, "\n|;")
split_input
matrix_input = matrix(unlist(split_input),
ncol = 3,
byrow = TRUE)
df_input = as.data.frame(matrix_input)
View(df_input)
colnames(df_input) = c("t1", "t2", "result")
View(df_input)
league_table = as.data.frame(matrix(ncol = 6, nrow = nrow(df_input)))
View(league_table)
league_table = as.data.frame(matrix(ncol = 6, nrow = length(unique(df_input$t1)))
length(unique(df_input$t1)
length(unique(df_input$t1))
league_table = as.data.frame(matrix(ncol = 6, nrow = length(unique(df_input$t1)))
league_table = as.data.frame(matrix(ncol = 6, nrow = length(unique(df_input$t1)))
league_table = as.data.frame(matrix(ncol = 6, nrow = length(unique(df_input$t1))))
colnames(league_table) = c("Team", "MP", "W", "D", "L", "P")
unique(df_input$t1)
league_table
for (i in (1:nrow(df_input))){
i
}
for (i in 1:nrow(df_input)){
i
}
paste0(i)
for (i in 1:nrow(df_input)){
paste0(i)
}
knitr::opts_chunk$set(error = FALSE,
warning = FALSE,
message = FALSE)
set.seed(123)
group1 <- data.frame(cod_size = rnorm(10), cod_age = rnorm(10), cod_weight = rnorm(10))
group2 <- data.frame(cod_size = rnorm(10), cod_age = rnorm(10), cod_weight = rnorm(10))
View(group1)
# create random sample data (imagine it has been standardised)
set.seed(123)
jersey = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
sark = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
# combine the two groups into one data frame
df = rbind(jersey, sark)
# create a grouping variable
group = factor(c(rep("Jersey", 10),
rep("Sark", 10)))
# MANOVA
fit <- car::manova(cbind(x, y, z) ~ group,
data = data)
# create random sample data (imagine it has been standardised)
set.seed(123)
jersey = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
sark = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
# combine the two groups into one data frame
df = rbind(jersey, sark)
# create a grouping variable
group = factor(c(rep("Jersey", 10),
rep("Sark", 10)))
# MANOVA
fit <- car::manova(cbind(cod_size,
cod_age,
cod_weight) ~ group,
data = data)
# create random sample data (imagine it has been standardised)
set.seed(123)
jersey = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
sark = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
# combine the two groups into one data frame
df = rbind(jersey, sark)
# create a grouping variable
group = factor(c(rep("Jersey", 10),
rep("Sark", 10)))
# MANOVA
fit <- manova(cbind(cod_size,
cod_age,
cod_weight) ~ group,
data = data)
# create random sample data (imagine it has been standardised)
set.seed(123)
jersey = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
sark = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
# combine the two groups into one data frame
df = rbind(jersey, sark)
# create a grouping variable
group = factor(c(rep("Jersey", 10),
rep("Sark", 10)))
# MANOVA
fit <- manova(car:cbind(cod_size,
cod_age,
cod_weight) ~ group,
data = data)
jersey = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
# create random sample data (imagine it has been standardised)
set.seed(123)
jersey = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
sark = data.frame(cod_size = rnorm(10),
cod_age = rnorm(10),
cod_weight = rnorm(10))
# combine the two groups into one data frame
df = rbind(jersey, sark)
# create a grouping variable
group = factor(c(rep("Jersey", 10),
rep("Sark", 10)))
# MANOVA
fit <- manova(cbind(cod_size,
cod_age,
cod_weight) ~ group,
data = df)
# Print the results
summary(fit)
View(df)
plot(model)
# load tidyverse
library(tidyverse)
# load gapminder for 2007
data_gm = gapminder::gapminder %>%
filter(year == 2007)
# lets have a look at the data
data_gm
# assign data and variable
ggplot(data = data_gm,
aes(y = lifeExp, x = continent)) +
geom_point() +
labs(title = "Life Expentancy and Continents",
x = "Continent",
y = "Life Expectancy")
# use the lm() function
model = lm(data = data_gm,
formula = lifeExp ~ continent)
# export summary of regression
summary(model)
plot(model)
knitr::opts_chunk$set(error = FALSE,
warning = FALSE,
message = FALSE)
# Load the mtcars dataset
data(mtcars)
# Fit a linear regression model
model <- lm(mpg ~ hp, data = mtcars)
# Plot the residuals against the fitted values to check for heteroscedasticity
plot(model$fitted.values, model$residuals, main = "Residuals vs Fitted",
xlab = "Fitted values", ylab = "Residuals")
# Calculate the mean variance at different points in the regression
means <- aggregate(model$residuals^2, by = list(model$fitted.values), FUN = mean)
plot(means, type = "l", main = "Mean Variance vs Fitted", xlab = "Fitted values", ylab = "Mean Variance")
# generate some random data
set.seed(123)
x <- rnorm(100)
y <- rpois(100, exp(x))
# fit a Poisson regression model with log link function
model <- glm(y ~ x, family = poisson(link = "log"))
# print summary of model
summary(model)
# generate some random data
set.seed(123)
x = rnorm(100)
z = rnorm(100)
y = rpois(100, exp(x))
# fit a Poisson regression model with log link function
model = glm(y ~ x + z,
family = poisson(link = "log"))
# print summary of model
summary(model)
plot(model)
knitr::opts_chunk$set(error = FALSE,
warning = FALSE,
message = FALSE)
library(tidyverse)
library(readxl)
df = read_xls("fauna_amphi.xls")
# open data from xls to tibble
tbl_base = read_xls("fauna_amphi.xls") %>%
as.tbl()
# view names of variables
names(tbl_base)
# view names of variables
base_tbl %>% names()
# open data from xls to tibble
base_tbl = read_xls("fauna_amphi.xls") %>%
as.tbl()
# view names of variables
base_tbl %>% names()
data.class(base_tbl)
class(base_tbl)
paste0(class(i))}
for(r in nrow(base_tbl){
for(r in nrow(base_tbl)){
paste0(class(i))}
paste0(class(r))}
for(r in nrow(base_tbl)){
paste0(class(r))
}
for(r in nrow(base_tbl)){
paste0(class(r))
}
for(r in ncol(base_tbl)){
class(r))
summarise(base_tbl)
summary(base_tbl)
fauna = mvabund(fauna_amphi[, 6:19])
install.packages("mvabund")
View(base_tbl)
fauna = mvabund(fauna_amphi[, 6:19])
library(mvabund)
fauna = mvabund(fauna_amphi[, 6:19])
fauna = mvabund(base_tbl[, 6:19])
View(fauna)
boxplot(fauna)
meanvar.plot(fauna) # mean-variance plot
meanvar.plot(fauna)
meanvar.plot(fauna)
meanvar.plot(fauna)
meanvar.plot(fauna)
meanvar.plot(fauna)
library(tidyverse)
library(readxl)
library(mvabund)
# open data from xls to tibble
base_tbl = read_xls("fauna_amphi.xls") %>%
as.tbl()
# view names of variables
base_tbl %>% names()
fauna = mvabund(base_tbl[, 6:19])
boxplot(fauna)
meanvar.plot(fauna)
meanvar.plot(fauna)
meanvar.plot(fauna)
?meanvar.plot
meanvar.plot(fauna)
meanvar.plot(fauna)
meanvar.plot(fauna)
meanvar.plot(fauna,legend=TRUE)
meanvar.plot(fauna,legend=TRUE)
meanvar.plot(fauna,legend=TRUE)
meanvar.plot(fauna,legend=TRUE)
meanvar.plot(fauna,legend=TRUE)
meanvar.plot(fauna,legend=TRUE)
pdf("outputs/figures/meanvar_plot_AbsAbund.pdf", width = 5, height = 5)
pdf("meanvar_plot_AbsAbund.pdf", width = 5, height = 5)
meanvar.plot(fauna,legend=TRUE)
meanvar.plot(fauna,legend=TRUE)
meanvar.plot(fauna,legend=TRUE)
pdf("outputs/meanvar_plot_AbsAbund.pdf", width = 5, height = 5)
meanvar.plot(fauna)
```{r load-names}
library(tidyverse)
library(readxl)
library(mvabund)
# open data from xls to tibble
fauna_amphi = read_xls("fauna_amphi.xls") %>%
as.tbl()
# view names of variables
fauna_amphi %>% names()
fauna = mvabund(base_tbl[, 6:19])
boxplot(fauna)
model1=manyglm(fauna ~ fauna_amphi$Depth, family="poisson")
model2=manyglm(fauna ~ fauna_amphi$Season, family="poisson")
model3=manyglm(fauna ~ fauna_amphi$Depth*fauna_amphi$Season, family="poisson")
model4=manyglm(fauna ~ fauna_amphi$Mass + fauna_amphi$Depth*fauna_amphi$Season, family="poisson")
plot(model1)
plot(model2)
plot(model3)
plot(model4)
model1b=manyglm(fauna ~ fauna_amphi$Depth, family="negative_binomial")
model2b=manyglm(fauna ~ fauna_amphi$Season, family="negative_binomial")
model3b=manyglm(fauna ~ fauna_amphi$Depth*fauna_amphi$Season, family="negative_binomial")
model4b=manyglm(fauna ~ fauna_amphi$Mass + fauna_amphi$Depth*fauna_amphi$Season, family="negative_binomial")
plot(model1b)
plot(model2b)
plot(model3b)
plot(model4b)
summary(model4b)
summary(model1b)
summary(model2b)
summary(model3b)
summary(model4b)
ggplot(fauna_amphi, aes(x=Depth,
y=Gammaropsis.ostroumowi)) +
geom_boxplot()
ggplot(fauna_amphi, aes(x=Depth,
y=Amphilocus.manudens)) +
geom_boxplot()
knitr::opts_chunk$set(error = FALSE,
warning = FALSE,
message = FALSE)
library(raster)
# create a 16x16 raster layer with all cells set to NA
r <- raster(matrix(NA, ncol=16, nrow=16))
# set the cells corresponding to the knight's shape to 1
r[6, 8] <- 1
r[7, 6:7] <- 1
r[8, 6:7] <- 1
r[9, 6:7] <- 1
r[10, 6:7] <- 1
r[11, 7] <- 1
r[12, 6:7] <- 1
r[13, 6:7] <- 1
r[14, 6:7] <- 1
r[15, 8] <- 1
# plot the raster layer
plot(r, col="black", axes=FALSE, box=FALSE)
library(raster)
# create a 16x16 raster layer with all cells set to NA
r <- raster(matrix(NA, ncol=16, nrow=16))
# create the walls of the castle
r[1:8, 1] <- 1
r[1:8, 16] <- 1
r[1, 1:16] <- 1
r[8, 1:16] <- 1
# create the towers of the castle
r[1:3, 5:6] <- 1
r[1:3, 11:12] <- 1
r[13:15, 5:6] <- 1
r[13:15, 11:12] <- 1
# create the gate of the castle
r[8:9, 7:10] <- 1
# plot the raster layer
plot(r, col="grey", axes=FALSE, box=FALSE)
# Define the colors for the image
colors <- c("skyblue", "white", "gray", "brown")
# Define the matrix of color indices for the image
castle <- matrix(c(
1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 1 ,1,
1 ,1 ,2 ,3 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,3 ,2 ,1 ,1,
1 ,2 ,3 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,4 ,3 ,2 ,1,
2 ,3 ,4 ,4 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,3 ,4 ,4 ,3 ,
<...>
library(graphics)
# create a matrix of colors for the pixels
castle <- matrix(c(
"white", "white", "white", "white", "white", "white", "white", "white",
"white", "white", "white", "white", "white", "white", "white", "white",
"black", "black", "black", "black", "black", "black", "black", "black",
"black", "black", "black", "black", "black", "black", "black", "black",
"#A9A9A9","#A9A9A9","#A9A9A9","#A9A9A9","#A9A9A9","#A9A9A9","#0000FF","#0000FF",
"#0000FF","#0000FF","#0000FF","#0000FF","#0000FF","#0000FF","red","red",
"#808080","#808080","#808080","#808080","red","red","red","red",
"#808080","#808080","red","red","red","red","red","red",
"#808080","#808080","red","red","red","red","red","red",
"#808080","#808080","green","green","green","green","green","green",
"#808080","#808080","green","green","green","green","green","green",
"#808080","#808080","#D3D3D3","#D3D3D3","#D3D3D3","#D3D3D3","#D3D3D3","#D3D3D3",
"#808080","#808080","#C0C0C0","#C0C0C0","#C0C0C0","#C0C0C0", "#C0C0C0","#C0C0C0","#696969","#696969","#696969","#696969", "#696969", "#696969","#696969","#696969",
"#696969","#696969","#696969","#696969","#696969","#696969","#696969","#696969"
), nrow = 16, ncol = 16, byrow = TRUE)
# convert the matrix to a raster object
castle <- as.raster(castle)
# plot the raster image
plot(NA, xlim = c(1,16), ylim = c(1,16), axes = FALSE)
rasterImage(castle, xleft = 1, ybottom = 1, xright = 16, ytop = 16)
